name: Unity Continuous Integration Workflow

on:
  push:
    branches:
      - main
env:
    targetPlatform: Android
jobs:
  unity_tests:
    runs-on: ubuntu-latest
    env:
      projectPath: PirateRushVR

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2.4.0
        with:
          lfs: true

      - name: Cache Unity Library
        uses: actions/cache@v2
        with:
              path: Library
              key: Library-${{ matrix.projectPath }}
              restore-keys: |
                 Library-${{ matrix.projectPath }}
                 Library-
            
      - name: Copy Unity to temporary folder
        run: |
          pwd
          folderName=$(echo "${PWD##*/}")
          rsync -r "$GITHUB_WORKSPACE" "copiedProject" 
          ls -F "copiedProject/$folderName"
          
      - name: Run Unity Tests
        id: runUnityTests
        uses: game-ci/unity-test-runner@v3
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          projectPath: ./copiedProject/${{ env.projectPath }}
          testMode: all
          coverageOptions: 'generateAdditionalMetrics;generateHtmlReport;generateBadgeReport'

      - name: Upload Test Coverage Results
        uses: actions/upload-artifact@v2
        with:
          name: Test Coverage Results (all)
          path: ${{ steps.runUnityTests.outputs.coveragePath }}

  unity_build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2.4.0
        with:
          lfs: true

      - name: Cache Unity Library
        uses: actions/cache@v2
        with:
              path: Library
              key: Library-${{ matrix.projectPath }}
              restore-keys: |
                 Library-${{ matrix.projectPath }}
                 Library-
                 
      - name: Build Unity Project
        uses: game-ci/unity-builder@v3
        id: myBuildStep
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          versioning: Semantic
          targetPlatform: ${{ env.targetPlatform }}
          
      - run: echo 'Project Version:${{ steps.myBuildStep.outputs.buildVersion }}'
          

      - name: Upload Unity Build
        uses: actions/upload-artifact@v2
        with:
          name: Unity-Build-${{ env.targetPlatform }}-${{steps.myBuildStep.outputs.buildVersion}}
          path: build/${{ env.targetPlatform }}
